(defparameter *sequence* '())
(defparameter *score* 0)
(defparameter *level* 0)

(defun clear-screen ()
  (format t "~c[2J~c[H" #\Escape #\Escape))

(defun show-board ()
  (format t "~%+---+---+---+~%")
  (format t "| 1 | 2 | 3 |~%")
  (format t "+---+---+---+~%")
  (format t "| 4 | 5 | 6 |~%")
  (format t "+---+---+---+~%")
  (format t "| 7 | 8 | 9 |~%")
  (format t "+---+---+---+~%"))

(defun add-to-sequence ()
  (push (1+ (random 9)) *sequence*))

(defun show-sequence ()
  (format t "Observe the sequence:~%")
  (dolist (number (reverse *sequence*))
    (format t "~a " number)
    (finish-output)
    (sleep 1))
  (clear-screen))

(defun get-player-input ()
  (format t "Enter the sequence (numbers separated by space): ")
  (read-line))

(defun compare-sequences (input)
  (let ((player-numbers (mapcar #'parse-integer (split-string input))))
    (equal player-numbers (reverse *sequence*))))

(defun split-string (string)
  (loop for i = 0 then (1+j)
        as j = (position #\Space string :start i)
        collect (subseq string i j)
        while j))

(defun play-round ()
  (incf *level*)
  (add-to-sequence)
  (show-sequence)
  (show-board)
  (let ((input (get-player-input)))
    (if (compare-sequences input)
        (progn
          (incf *score* 10)
          (format t "Correct! Score: ~a~%" *score*)
          (sleep 2)
          (clear-screen)
          (play-round))
        (format t "Game over! Final score: ~a~%" *score*))))

(defun love-yer-brain ()
  (format t "Welcome to Love Yer Brain!~%")
  (format t "Remember the sequence of numbers and repeat it.~%")
  (format t "Press Enter to start.")
  (read-line)
  (setf *sequence* '())
  (setf *score* 0)
  (setf *level* 0)
  (clear-screen)
  (play-round)
  (format t "Do you want to play again? (y/n): ")
  (let ((play-again (read-line))) 
    (when (string-equal play-again "y")
      (love-yer-brain))))

(love-yer-brain)                           
